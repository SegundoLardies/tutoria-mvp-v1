#!/usr/bin/env python3
"""
Servidor WebSocket simple para el frontend
"""
import asyncio
import websockets
import json
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Almacenar conexiones activas
active_connections = {}

async def handle_websocket(websocket, path):
    """Manejar conexi√≥n WebSocket"""
    session_id = path.split('/')[-1] if path.startswith('/ws/') else 'default'
    logger.info(f"üîå Cliente conectando para sesi√≥n: {session_id}")
    
    # Aceptar conexi√≥n
    await websocket.accept()
    active_connections[session_id] = websocket
    logger.info(f"‚úÖ WebSocket conectado para sesi√≥n: {session_id}")
    
    try:
        # Enviar mensaje de confirmaci√≥n
        await websocket.send(json.dumps({
            "type": "connection",
            "status": "connected",
            "session_id": session_id,
            "timestamp": datetime.now().isoformat()
        }))
        
        # Mantener conexi√≥n activa
        async for message in websocket:
            try:
                data = json.loads(message)
                logger.info(f"üì® Mensaje recibido de {session_id}: {data}")
                
                # Echo del mensaje
                response = {
                    "type": "echo",
                    "data": data,
                    "session_id": session_id,
                    "timestamp": datetime.now().isoformat()
                }
                await websocket.send(json.dumps(response))
                
            except json.JSONDecodeError:
                logger.warning(f"‚ö†Ô∏è Mensaje no v√°lido de {session_id}: {message}")
                # Enviar mensaje de error
                await websocket.send(json.dumps({
                    "type": "error",
                    "message": "Mensaje no v√°lido",
                    "session_id": session_id,
                    "timestamp": datetime.now().isoformat()
                }))
                
    except websockets.exceptions.ConnectionClosed:
        logger.info(f"üîå Conexi√≥n cerrada para sesi√≥n: {session_id}")
    except Exception as e:
        logger.error(f"‚ùå Error en WebSocket para sesi√≥n {session_id}: {e}")
    finally:
        # Limpiar conexi√≥n
        if session_id in active_connections:
            del active_connections[session_id]
        logger.info(f"üîå WebSocket desconectado para sesi√≥n: {session_id}")

async def main():
    """Funci√≥n principal"""
    logger.info("üöÄ Iniciando servidor WebSocket simple...")
    
    # Crear servidor WebSocket
    server = await websockets.serve(
        handle_websocket,
        "127.0.0.1",
        8004,
        ping_interval=20,
        ping_timeout=10
    )
    
    logger.info("‚úÖ Servidor WebSocket iniciado en ws://127.0.0.1:8004")
    logger.info("üì° Esperando conexiones...")
    
    # Mantener servidor ejecut√°ndose
    await server.wait_closed()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Servidor detenido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error en servidor: {e}")
        raise
